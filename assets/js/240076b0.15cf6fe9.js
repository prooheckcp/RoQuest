"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4886],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=i(t),f=o,p=d["".concat(u,".").concat(f)]||d[f]||g[f]||a;return t?r.createElement(p,s(s({ref:n},c),{},{components:t})):r.createElement(p,s({ref:n},c))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[d]="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},34980:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:2,sidebar_label:"\ud83d\udcdc Making a Quest Log"},s="\ud83d\udcdc Making a Quest Log",l={unversionedId:"MyFirstUI/QuestLog",id:"MyFirstUI/QuestLog",title:"\ud83d\udcdc Making a Quest Log",description:"For the quest log let's create 2 local scripts. One for the HUD and nother one for the quest log! Feel free to copy paste the example.",source:"@site/docs/MyFirstUI/QuestLog.md",sourceDirName:"MyFirstUI",slug:"/MyFirstUI/QuestLog",permalink:"/RoQuest/docs/MyFirstUI/QuestLog",draft:!1,editUrl:"https://github.com/prooheckcp/RoQuest/edit/master/docs/MyFirstUI/QuestLog.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"\ud83d\udcdc Making a Quest Log"},sidebar:"defaultSidebar",previous:{title:"\ud83d\udda5\ufe0f Making Quest UI",permalink:"/RoQuest/docs/MyFirstUI/MakingQuestUI"},next:{title:"\ud83e\udd1d Accept Type",permalink:"/RoQuest/docs/AutomaticVsManual/acceptType"}},u={},i=[{value:"\ud83d\udc40 Example",id:"-example",level:2},{value:"\ud83d\udd11 Main take aways",id:"-main-take-aways",level:2}],c={toc:i},d="wrapper";function g(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-making-a-quest-log"},"\ud83d\udcdc Making a Quest Log"),(0,o.kt)("p",null,"For the quest log let's create 2 local scripts. One for the HUD and nother one for the quest log! Feel free to copy paste the example."),(0,o.kt)("h2",{id:"-example"},"\ud83d\udc40 Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'--Hud.lua\n--!strict\nlocal Players = game:GetService("Players")\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\n\nlocal localPlayer: Player = Players.LocalPlayer\nlocal playerGui = localPlayer:WaitForChild("PlayerGui")\nlocal questLog = playerGui:WaitForChild("QuestLog")\nlocal hud = playerGui:WaitForChild("HUD")\n\nlocal screens = {\n    QuestLog = questLog.Container,\n}\n\nlocal Hud = {}\nHud.currentScreen = ""\n\nfunction Hud:DisableScreen(screenName: string)\n    if not screens[screenName] then\n        return\n    end\n\n    screens[screenName].Visible = false\n    self.currentScreen = ""\nend\n\nfunction Hud:EnableScreen(screenName: string)\n    local currentScreen = self.currentScreen\n    self:DisableScreen(self.currentScreen)\n\n    if screenName == currentScreen then\n        return\n    end\n\n    screens[screenName].Visible = true\n    self.currentScreen = screenName\nend\n\nRoQuest.OnStart():andThen(function()\n    for _, instance: Instance in hud.Container:GetChildren() do\n        if not instance:IsA("ImageButton") then\n            continue\n        end\n\n        (instance :: ImageButton).Activated:Connect(function()\n            Hud:EnableScreen(instance.Name)\n        end)   \n    end \n\nend)\n')),(0,o.kt)("p",null,"--QuestLog.lua"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\nlocal Red = require(ReplicatedStorage.RoQuest.Vendor.Red).Client\n\ntype Quest = RoQuest.Quest\n\nlocal DEFAULT_COLOR: Color3 = Color3.fromRGB(140, 140, 140)\nlocal ACTIVE_COLOR: Color3 = Color3.fromRGB(255, 255, 127)\n\nlocal localPlayer: Player = Players.LocalPlayer\nlocal playerGui: PlayerGui = localPlayer:WaitForChild("PlayerGui")\nlocal questLog: ScreenGui = playerGui:WaitForChild("QuestLog")\nlocal template: Frame = questLog.Container.Unavailable.Template:Clone()\nquestLog.Container.Unavailable.Template:Destroy() -- Delete the template after we cached a clone\n\nlocal QuestLog = {}\nQuestLog.screens = {} :: {[string]: ScrollingFrame}\nQuestLog.buttons = {} :: {[string]: GuiButton}\nQuestLog.currentScreen = "" :: string\n\nfunction QuestLog:UpdateButtonColor()\n    for buttonName: string, button: GuiButton in self.buttons do\n        button.BackgroundColor3 = buttonName == self.currentScreen and ACTIVE_COLOR or DEFAULT_COLOR\n    end\nend\n\nfunction QuestLog:SetScreen(name: string)\n    if self.currentScreen == name then\n        return\n    end\n\n    local currentScrollingFrame: ScrollingFrame? = self.screens[self.currentScreen]\n    local newScrollingFrame: ScrollingFrame? = self.screens[name]\n\n    if currentScrollingFrame then\n        currentScrollingFrame.Visible = false\n    end\n\n    if newScrollingFrame then\n        newScrollingFrame.Visible = true\n    end\n\n    self.currentScreen = name\n    self:UpdateButtonColor()\nend\n\nfunction QuestLog:SetupButtons()\n    for _, button: Instance in questLog.Container.Buttons:GetChildren() do\n        if not button:IsA("GuiButton") then\n            continue\n        end\n\n        (button :: GuiButton).Activated:Connect(function()\n            self:SetScreen(button.Name)\n        end)\n\n        self.buttons[button.Name] = button\n    end\nend\n\nfunction QuestLog:SetupWindows()\n    for _, child: Instance in questLog.Container:GetChildren() do\n        if not child:IsA("ScrollingFrame") then\n            continue\n        end\n\n        self.screens[child.Name] = child\n    end\nend\n\nfunction QuestLog:DestroyQuest(scrollingFrame: ScrollingFrame, questId: string)\n    local frame: Frame? = scrollingFrame:FindFirstChild(questId)\n\n    if frame then\n        frame:Destroy()\n    end\nend\n\nfunction QuestLog:CreateQuest(scrollingFrame: ScrollingFrame, quest: Quest)\n    local Net = Red "QuestManager"\n\n    local frame: Frame = scrollingFrame:FindFirstChild(quest.QuestId) or template:Clone()\n    frame.Name = quest.QuestId\n    frame.Title.Text = quest.Name\n    frame.Description.Text = quest.Description\n    frame.Buttons.Cancel.Visible = quest:GetQuestStatus() == RoQuest.QuestStatus.InProgress\n    frame.Buttons.Cancel.Activated:Connect(function()\n        Net:Fire("CancelQuest", quest.QuestId)\n    end)\n\n    frame.Visible = true\n    frame.Parent = scrollingFrame\nend\n\nfunction QuestLog:PopulateScreen(scrollingFrame: ScrollingFrame, quests: {[string]: Quest})\n    for _, child: Instance in scrollingFrame:GetChildren() do -- Remove quests no longer in use\n        if not child:IsA("Frame") then\n            continue\n        end\n\n        if not quests[child.Name] then\n            child:Destroy()\n        end\n    end\n\n    for _, quest: Quest in quests do\n        self:CreateQuest(scrollingFrame, quest)\n    end\nend\n\nfunction QuestLog:SetAllScreens()\n    self:PopulateScreen(self.screens["InProgress"], RoQuest:GetInProgressQuests())\n    self:PopulateScreen(self.screens["Available"], RoQuest:GetAvailableQuests())\n    self:PopulateScreen(self.screens["Completed"], RoQuest:GetCompletedQuests())\n    self:PopulateScreen(self.screens["Delivered"], RoQuest:GetDeliveredQuests())\n    self:PopulateScreen(self.screens["Unavailable"], RoQuest:GetUnAvailableQuests())\nend\n\nRoQuest.OnStart():andThen(function()\n    QuestLog:SetupWindows() -- Caching our windows\n    QuestLog:SetupButtons() -- Caching our buttons\n    QuestLog:SetScreen("InProgress") -- Setting the initial active screen\n    QuestLog:SetAllScreens() -- Populating all screens\n\n    RoQuest.OnUnAvailableQuestChanged:Connect(function()\n        QuestLog:PopulateScreen(QuestLog.screens["Unavailable"], RoQuest:GetUnAvailableQuests())\n    end)\n\n    RoQuest.OnAvailableQuestChanged:Connect(function()\n        QuestLog:PopulateScreen(QuestLog.screens["Available"], RoQuest:GetAvailableQuests())\n    end)\n\n    RoQuest.OnCompletedQuestChanged:Connect(function()\n        QuestLog:PopulateScreen(QuestLog.screens["Completed"], RoQuest:GetCompletedQuests())\n    end)\n\n    RoQuest.OnDeliveredQuestChanged:Connect(function()\n        QuestLog:PopulateScreen(QuestLog.screens["Delivered"], RoQuest:GetDeliveredQuests())\n    end)\n\n    RoQuest.OnInProgressQuestChanged:Connect(function()\n        QuestLog:PopulateScreen(QuestLog.screens["InProgress"], RoQuest:GetInProgressQuests())\n    end)\n\n    RoQuest.OnPlayerDataChanged:Connect(function()\n        QuestLog:SetAllScreens()\n    end) -- Hard reset our screens      \nend)\n')),(0,o.kt)("h2",{id:"-main-take-aways"},"\ud83d\udd11 Main take aways"),(0,o.kt)("p",null,"We used multiple events from RoQuest to listen to the changes from specific quest states. We also used different quest getters to get the information from said quests."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You should always have a listener for when the player data changes that resets everything. This ensure that if a player's data gets hard reset that you can update the interface accordingly."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-lua"},"    RoQuest.OnPlayerDataChanged:Connect(function()\n        QuestLog:SetAllScreens()\n    end) -- Hard reset our screens    \n"))))}g.isMDXComponent=!0}}]);