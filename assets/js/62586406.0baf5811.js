"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2332],{3036:n=>{n.exports=JSON.parse('{"functions":[{"name":"new","desc":"Constructs a new Signal","params":[],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"static","source":{"line":154,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Wrap","desc":"Constructs a new Signal that wraps around an RBXScriptSignal.\\n\\n\\nFor example:\\n```lua\\nlocal signal = Signal.Wrap(workspace.ChildAdded)\\nsignal:Connect(function(part) print(part.Name .. \\" added\\") end)\\nInstance.new(\\"Part\\").Parent = workspace\\n```","params":[{"name":"rbxScriptSignal","desc":"Existing RBXScriptSignal to wrap","lua_type":"RBXScriptSignal"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"static","source":{"line":177,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Is","desc":"Checks if the given object is a Signal.","params":[{"name":"obj","desc":"Object to check","lua_type":"any"}],"returns":[{"desc":"`true` if the object is a Signal.","lua_type":"boolean"}],"function_type":"static","source":{"line":197,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Connect","desc":"Connects a function to the signal, which will be called anytime the signal is fired.\\n```lua\\nsignal:Connect(function(msg, num)\\n\\tprint(msg, num)\\nend)\\n\\nsignal:Fire(\\"Hello\\", 25)\\n```","params":[{"name":"fn","desc":"","lua_type":"ConnectionFn"}],"returns":[{"desc":"","lua_type":"SignalConnection"}],"function_type":"method","source":{"line":214,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"ConnectOnce","desc":"","params":[{"name":"fn","desc":"","lua_type":"ConnectionFn"}],"returns":[{"desc":"","lua_type":"SignalConnection"}],"function_type":"method","deprecated":{"version":"v1.3.0","desc":"Use `Signal:Once` instead."},"source":{"line":237,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Once","desc":"Connects a function to the signal, which will be called the next time the signal fires. Once\\nthe connection is triggered, it will disconnect itself.\\n```lua\\nsignal:Once(function(msg, num)\\n\\tprint(msg, num)\\nend)\\n\\nsignal:Fire(\\"Hello\\", 25)\\nsignal:Fire(\\"This message will not go through\\", 10)\\n```","params":[{"name":"fn","desc":"","lua_type":"ConnectionFn"}],"returns":[{"desc":"","lua_type":"SignalConnection"}],"function_type":"method","source":{"line":256,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"DisconnectAll","desc":"Disconnects all connections from the signal.\\n```lua\\nsignal:DisconnectAll()\\n```","params":[],"returns":[],"function_type":"method","source":{"line":293,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Fire","desc":"Fire the signal, which will call all of the connected functions with the given arguments.\\n```lua\\nsignal:Fire(\\"Hello\\")\\n\\n-- Any number of arguments can be fired:\\nsignal:Fire(\\"Hello\\", 32, {Test = \\"Test\\"}, true)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":328,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"FireDeferred","desc":"Same as `Fire`, but uses `task.defer` internally & doesn\'t take advantage of thread reuse.\\n```lua\\nsignal:FireDeferred(\\"Hello\\")\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":349,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Wait","desc":"Yields the current thread until the signal is fired, and returns the arguments fired from the signal.\\nYielding the current thread is not always desirable. If the desire is to only capture the next event\\nfired, using `Once` might be a better solution.\\n```lua\\ntask.spawn(function()\\n\\tlocal msg, num = signal:Wait()\\n\\tprint(msg, num) --\x3e \\"Hello\\", 32\\nend)\\nsignal:Fire(\\"Hello\\", 32)\\n```","params":[],"returns":[{"desc":"","lua_type":"... any"}],"function_type":"method","yields":true,"source":{"line":377,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"Destroy","desc":"Cleans up the signal.\\n\\nTechnically, this is only necessary if the signal is created using\\n`Signal.Wrap`. Connections should be properly GC\'d once the signal\\nis no longer referenced anywhere. However, it is still good practice\\nto include ways to strictly clean up resources. Calling `Destroy`\\non a signal will also disconnect all connections immediately.\\n```lua\\nsignal:Destroy()\\n```","params":[],"returns":[],"function_type":"method","source":{"line":407,"path":"RoQuest/Vendor/Signal.luau"}}],"properties":[],"types":[{"name":"SignalConnection","desc":"Represents a connection to a signal.\\n```lua\\nlocal connection = signal:Connect(function() end)\\nprint(connection.Connected) --\x3e true\\nconnection:Disconnect()\\nprint(connection.Connected) --\x3e false\\n```","fields":[{"name":"Connected","lua_type":"boolean","desc":""},{"name":"Disconnect","lua_type":"(SignalConnection) -> ()","desc":""}],"source":{"line":76,"path":"RoQuest/Vendor/Signal.luau"}},{"name":"ConnectionFn","desc":"A function connected to a signal.","lua_type":"(...any) -> ()","source":{"line":122,"path":"RoQuest/Vendor/Signal.luau"}}],"name":"Signal","desc":"A Signal is a data structure that allows events to be dispatched\\nand observed.\\n\\nThis implementation is a direct copy of the de facto standard, [GoodSignal](https://devforum.roblox.com/t/lua-signal-class-comparison-optimal-goodsignal-class/1387063),\\nwith some added methods and typings.\\n\\nFor example:\\n```lua\\nlocal signal = Signal.new()\\n\\n-- Subscribe to a signal:\\nsignal:Connect(function(msg)\\n\\tprint(\\"Got message:\\", msg)\\nend)\\n\\n-- Dispatch an event:\\nsignal:Fire(\\"Hello world!\\")\\n```","tags":["Vendor"],"source":{"line":146,"path":"RoQuest/Vendor/Signal.luau"}}')}}]);