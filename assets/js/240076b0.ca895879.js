"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[444],{25430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"MyFirstUI/QuestLog","title":"\ud83d\udcdc Making a Quest Log","description":"For the quest log let\'s create 2 local scripts. One for the HUD and nother one for the quest log! Feel free to copy paste the example.","source":"@site/docs/MyFirstUI/QuestLog.md","sourceDirName":"MyFirstUI","slug":"/MyFirstUI/QuestLog","permalink":"/RoQuest/docs/MyFirstUI/QuestLog","draft":false,"unlisted":false,"editUrl":"https://github.com/prooheckcp/RoQuest/edit/master/docs/MyFirstUI/QuestLog.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"\ud83d\udcdc Making a Quest Log"},"sidebar":"defaultSidebar","previous":{"title":"\ud83d\udda5\ufe0f Making Quest UI","permalink":"/RoQuest/docs/MyFirstUI/MakingQuestUI"},"next":{"title":"\ud83e\udd1d Accept Type","permalink":"/RoQuest/docs/AutomaticVsManual/acceptType"}}');var r=n(74848),o=n(28453);const a={sidebar_position:2,sidebar_label:"\ud83d\udcdc Making a Quest Log"},l="\ud83d\udcdc Making a Quest Log",u={},i=[{value:"\ud83d\udc40 Example",id:"-example",level:2},{value:"\ud83d\udd11 Main take aways",id:"-main-take-aways",level:2}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"-making-a-quest-log",children:"\ud83d\udcdc Making a Quest Log"})}),"\n",(0,r.jsx)(t.p,{children:"For the quest log let's create 2 local scripts. One for the HUD and nother one for the quest log! Feel free to copy paste the example."}),"\n",(0,r.jsx)(t.h2,{id:"-example",children:"\ud83d\udc40 Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'--Hud.lua\n--!strict\nlocal Players = game:GetService("Players")\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\n\nlocal localPlayer: Player = Players.LocalPlayer\nlocal playerGui = localPlayer:WaitForChild("PlayerGui")\nlocal questLog = playerGui:WaitForChild("QuestLog")\nlocal hud = playerGui:WaitForChild("HUD")\n\nlocal screens = {\n\tQuestLog = questLog.Container,\n}\n\nlocal Hud = {}\nHud.currentScreen = ""\n\nfunction Hud:DisableScreen(screenName: string)\n\tif not screens[screenName] then\n\t\treturn\n\tend\n\n\tscreens[screenName].Visible = false\n\tself.currentScreen = ""\nend\n\nfunction Hud:EnableScreen(screenName: string)\n\tlocal currentScreen = self.currentScreen\n\tself:DisableScreen(self.currentScreen)\n\n\tif screenName == currentScreen then\n\t\treturn\n\tend\n\n\tscreens[screenName].Visible = true\n\tself.currentScreen = screenName\nend\n\nRoQuest.OnStart():andThen(function()\n\tfor _, instance: Instance in hud.Container:GetChildren() do\n\t\tif not instance:IsA("ImageButton") then\n\t\t\tcontinue\n\t\tend\n\n\t\t(instance :: ImageButton).Activated:Connect(function()\n\t\t\tHud:EnableScreen(instance.Name)\n\t\tend)   \n\tend\t\n\nend)\n'})}),"\n",(0,r.jsx)(t.p,{children:"--QuestLog.lua"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\nlocal Red = require(ReplicatedStorage.RoQuest.Vendor.Red).Client\n\ntype Quest = RoQuest.Quest\n\nlocal DEFAULT_COLOR: Color3 = Color3.fromRGB(140, 140, 140)\nlocal ACTIVE_COLOR: Color3 = Color3.fromRGB(255, 255, 127)\n\nlocal localPlayer: Player = Players.LocalPlayer\nlocal playerGui: PlayerGui = localPlayer:WaitForChild("PlayerGui")\nlocal questLog: ScreenGui = playerGui:WaitForChild("QuestLog")\nlocal template: Frame = questLog.Container.Unavailable.Template:Clone()\nquestLog.Container.Unavailable.Template:Destroy() -- Delete the template after we cached a clone\n\nlocal QuestLog = {}\nQuestLog.screens = {} :: {[string]: ScrollingFrame}\nQuestLog.buttons = {} :: {[string]: GuiButton}\nQuestLog.currentScreen = "" :: string\n\nfunction QuestLog:UpdateButtonColor()\n\tfor buttonName: string, button: GuiButton in self.buttons do\n\t\tbutton.BackgroundColor3 = buttonName == self.currentScreen and ACTIVE_COLOR or DEFAULT_COLOR\n\tend\nend\n\nfunction QuestLog:SetScreen(name: string)\n\tif self.currentScreen == name then\n\t\treturn\n\tend\n\n\tlocal currentScrollingFrame: ScrollingFrame? = self.screens[self.currentScreen]\n\tlocal newScrollingFrame: ScrollingFrame? = self.screens[name]\n\n\tif currentScrollingFrame then\n\t\tcurrentScrollingFrame.Visible = false\n\tend\n\n\tif newScrollingFrame then\n\t\tnewScrollingFrame.Visible = true\n\tend\n\n\tself.currentScreen = name\n\tself:UpdateButtonColor()\nend\n\nfunction QuestLog:SetupButtons()\n\tfor _, button: Instance in questLog.Container.Buttons:GetChildren() do\n\t\tif not button:IsA("GuiButton") then\n\t\t\tcontinue\n\t\tend\n\n\t\t(button :: GuiButton).Activated:Connect(function()\n\t\t\tself:SetScreen(button.Name)\n\t\tend)\n\n\t\tself.buttons[button.Name] = button\n\tend\nend\n\nfunction QuestLog:SetupWindows()\n\tfor _, child: Instance in questLog.Container:GetChildren() do\n\t\tif not child:IsA("ScrollingFrame") then\n\t\t\tcontinue\n\t\tend\n\n\t\tself.screens[child.Name] = child\n\tend\nend\n\nfunction QuestLog:DestroyQuest(scrollingFrame: ScrollingFrame, questId: string)\n\tlocal frame: Frame? = scrollingFrame:FindFirstChild(questId)\n\n\tif frame then\n\t\tframe:Destroy()\n\tend\nend\n\nfunction QuestLog:CreateQuest(scrollingFrame: ScrollingFrame, quest: Quest)\n\tlocal Net = Red "QuestManager"\n\n\tlocal frame: Frame = scrollingFrame:FindFirstChild(quest.QuestId) or template:Clone()\n\tframe.Name = quest.QuestId\n\tframe.Title.Text = quest.Name\n\tframe.Description.Text = quest.Description\n\tframe.Buttons.Cancel.Visible = quest:GetQuestStatus() == RoQuest.QuestStatus.InProgress\n\tframe.Buttons.Cancel.Activated:Connect(function()\n\t\tNet:Fire("CancelQuest", quest.QuestId)\n\tend)\n\n\tframe.Visible = true\n\tframe.Parent = scrollingFrame\nend\n\nfunction QuestLog:PopulateScreen(scrollingFrame: ScrollingFrame, quests: {[string]: Quest})\n\tfor _, child: Instance in scrollingFrame:GetChildren() do -- Remove quests no longer in use\n\t\tif not child:IsA("Frame") then\n\t\t\tcontinue\n\t\tend\n\n\t\tif not quests[child.Name] then\n\t\t\tchild:Destroy()\n\t\tend\n\tend\n\n\tfor _, quest: Quest in quests do\n\t\tself:CreateQuest(scrollingFrame, quest)\n\tend\nend\n\nfunction QuestLog:SetAllScreens()\n\tself:PopulateScreen(self.screens["InProgress"], RoQuest:GetInProgressQuests())\n\tself:PopulateScreen(self.screens["Available"], RoQuest:GetAvailableQuests())\n\tself:PopulateScreen(self.screens["Completed"], RoQuest:GetCompletedQuests())\n\tself:PopulateScreen(self.screens["Delivered"], RoQuest:GetDeliveredQuests())\n\tself:PopulateScreen(self.screens["Unavailable"], RoQuest:GetUnAvailableQuests())\nend\n\nRoQuest.OnStart():andThen(function()\n\tQuestLog:SetupWindows() -- Caching our windows\n\tQuestLog:SetupButtons() -- Caching our buttons\n\tQuestLog:SetScreen("InProgress") -- Setting the initial active screen\n\tQuestLog:SetAllScreens() -- Populating all screens\n\n\tRoQuest.OnUnAvailableQuestChanged:Connect(function()\n\t\tQuestLog:PopulateScreen(QuestLog.screens["Unavailable"], RoQuest:GetUnAvailableQuests())\n\tend)\n\n\tRoQuest.OnAvailableQuestChanged:Connect(function()\n\t\tQuestLog:PopulateScreen(QuestLog.screens["Available"], RoQuest:GetAvailableQuests())\n\tend)\n\n\tRoQuest.OnCompletedQuestChanged:Connect(function()\n\t\tQuestLog:PopulateScreen(QuestLog.screens["Completed"], RoQuest:GetCompletedQuests())\n\tend)\n\n\tRoQuest.OnDeliveredQuestChanged:Connect(function()\n\t\tQuestLog:PopulateScreen(QuestLog.screens["Delivered"], RoQuest:GetDeliveredQuests())\n\tend)\n\n\tRoQuest.OnInProgressQuestChanged:Connect(function()\n\t\tQuestLog:PopulateScreen(QuestLog.screens["InProgress"], RoQuest:GetInProgressQuests())\n\tend)\n\n\tRoQuest.OnPlayerDataChanged:Connect(function()\n\t\tQuestLog:SetAllScreens()\n\tend) -- Hard reset our screens    \t\nend)\n'})}),"\n",(0,r.jsx)(t.h2,{id:"-main-take-aways",children:"\ud83d\udd11 Main take aways"}),"\n",(0,r.jsx)(t.p,{children:"We used multiple events from RoQuest to listen to the changes from specific quest states. We also used different quest getters to get the information from said quests."}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.p,{children:"You should always have a listener for when the player data changes that resets everything. This ensure that if a player's data gets hard reset that you can update the interface accordingly."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-lua",children:"\tRoQuest.OnPlayerDataChanged:Connect(function()\n\t\tQuestLog:SetAllScreens()\n\tend) -- Hard reset our screens    \n"})})]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var s=n(96540);const r={},o=s.createContext(r);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);