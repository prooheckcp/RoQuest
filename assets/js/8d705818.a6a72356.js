"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=l(n),h=a,f=p["".concat(u,".").concat(h)]||p[h]||d[h]||s;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},35115:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={sidebar_position:6,sidebar_label:"\u26d3\ufe0f My First Quest Chain"},i="\u26d3\ufe0f My First Quest Chain",o={unversionedId:"MyFirstQuestChain",id:"MyFirstQuestChain",title:"\u26d3\ufe0f My First Quest Chain",description:"\u2753 What is a quest chain?",source:"@site/docs/MyFirstQuestChain.md",sourceDirName:".",slug:"/MyFirstQuestChain",permalink:"/RoQuest/docs/MyFirstQuestChain",draft:!1,editUrl:"https://github.com/prooheckcp/RoQuest/edit/master/docs/MyFirstQuestChain.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,sidebar_label:"\u26d3\ufe0f My First Quest Chain"},sidebar:"defaultSidebar",previous:{title:"\ud83d\udce6 Deliver Type",permalink:"/RoQuest/docs/AutomaticVsManual/DeliverType"},next:{title:"\u267e\ufe0f Infinite",permalink:"/RoQuest/docs/RepeatableQuests/Infinite"}},u={},l=[{value:"\u2753 What is a quest chain?",id:"-what-is-a-quest-chain",level:2},{value:"\ud83c\udff9 Our second quest",id:"-our-second-quest",level:2},{value:"\u26d3\ufe0f Chaining quest",id:"\ufe0f-chaining-quest",level:2}],c={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\ufe0f-my-first-quest-chain"},"\u26d3\ufe0f My First Quest Chain"),(0,a.kt)("h2",{id:"-what-is-a-quest-chain"},"\u2753 What is a quest chain?"),(0,a.kt)("p",null,"A quest chain as the name indicates is when we have a sequence of quests. This means that the player needs to deliver a quest before being allowed to move into the next one!"),(0,a.kt)("p",null,"We'll make an example one with the apple quest that we have done in the earlier sections! Make sure to check ",(0,a.kt)("a",{parentName:"p",href:"/RoQuest/docs/MyFirstQuest/DeclaringQuest"},"My First Quest")," if you haven't already!"),(0,a.kt)("h2",{id:"-our-second-quest"},"\ud83c\udff9 Our second quest"),(0,a.kt)("p",null,"Let's make a quest just like the previous one but instead of 2 apples we'll need 5 apples to complete!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\nlocal appleObjective = require(ReplicatedStorage.QuestObjectives.AppleInfo)\n\nlocal Quest = RoQuest.Quest\n\nreturn Quest {\n    Name = "Collect Apples", -- The name of our quest\n    Description = "Collect 5 apples", -- The description that we will display to our user\n    QuestId = "AppleCollection2", -- A unique identifier to our quest\n    QuestAcceptType = RoQuest.QuestAcceptType.Automatic, -- If the quest automatically gets accepted or rquires manual work\n    QuestDeliverType = RoQuest.QuestDeliverType.Automatic, -- If the quest automatically gets delivered or requires manual work\n    QuestRepeatableType = RoQuest.QuestRepeatableType.NonRepeatable, -- If the quest can be repeated or not\n    QuestStart = -1, -- UTC time to define when the quest should become available (specially useful for event quests)\n    QuestEnd = -1, -- UTC time to define when the quest should no longer be available (specially useful for event quests)\n    RequiredQuests = {}, -- A list of quests that are required to be delivered before this quest can be started\n    LifeCycles = {}, -- The lifecycles that will manage this quest\'s behavior\n    QuestObjectives = {\n        appleObjective:NewObjective(5)\n    }, \n}\n')),(0,a.kt)("p",null,"Don't forget to change the QuestID if you're copy pasting the previous quest!"),(0,a.kt)("h2",{id:"\ufe0f-chaining-quest"},"\u26d3\ufe0f Chaining quest"),(0,a.kt)("p",null,"Now that we chained the quest ensure it is connected to the previous quest by adding the ID from the previous quest to the ",(0,a.kt)("strong",{parentName:"p"},'"RequiredQuests"')," property!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return Quest {\n    Name = "Collect Apples", -- The name of our quest\n    Description = "Collect 5 apples", -- The description that we will display to our user\n    QuestId = "AppleCollection2", -- A unique identifier to our quest\n    QuestAcceptType = RoQuest.QuestAcceptType.Automatic, -- If the quest automatically gets accepted or rquires manual work\n    QuestDeliverType = RoQuest.QuestDeliverType.Automatic, -- If the quest automatically gets delivered or requires manual work\n    QuestRepeatableType = RoQuest.QuestRepeatableType.NonRepeatable, -- If the quest can be repeated or not\n    QuestStart = -1, -- UTC time to define when the quest should become available (specially useful for event quests)\n    QuestEnd = -1, -- UTC time to define when the quest should no longer be available (specially useful for event quests)\n    RequiredQuests = {"AppleCollection"}, -- A list of quests that are required to be delivered before this quest can be started\n    LifeCycles = {}, -- The lifecycles that will manage this quest\'s behavior\n    QuestObjectives = {\n        appleObjective:NewObjective(5)\n    }, \n}\n')),(0,a.kt)("p",null,"Now hop in the play test and give it a try!"))}d.isMDXComponent=!0}}]);