"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1043],{84296:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"RepeatableQuests/Infinite","title":"\u267e\ufe0f Infinite","description":"Sometimes we want quests to be repeatable. There are multiple types of repeatable quests and here we\'ll cover examples on all of them. Let\'s start by making a new quest! This time one where the player needs to collect Sticks!","source":"@site/docs/RepeatableQuests/Infinite.md","sourceDirName":"RepeatableQuests","slug":"/RepeatableQuests/Infinite","permalink":"/RoQuest/docs/RepeatableQuests/Infinite","draft":false,"unlisted":false,"editUrl":"https://github.com/prooheckcp/RoQuest/edit/master/docs/RepeatableQuests/Infinite.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"\u267e\ufe0f Infinite"},"sidebar":"defaultSidebar","previous":{"title":"\u26d3\ufe0f My First Quest Chain","permalink":"/RoQuest/docs/MyFirstQuestChain"},"next":{"title":"\ud83d\udcc5 Daily/Weekly","permalink":"/RoQuest/docs/RepeatableQuests/Daily"}}');var s=n(74848),a=n(28453);const c={sidebar_position:1,sidebar_label:"\u267e\ufe0f Infinite"},o="\u267e\ufe0f Infinite",l={},r=[{value:"\ud83e\udeb5 Creating Sticks",id:"-creating-sticks",level:2},{value:"\ud83d\udcbb Code",id:"-code",level:2},{value:"\ud83e\udeb5 Make Sticks collectible",id:"-make-sticks-collectible",level:3},{value:"\ud83c\udfaf Create Quest Objective",id:"-create-quest-objective",level:3},{value:"\ud83d\udcdc Create Quest",id:"-create-quest",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"\ufe0f-infinite",children:"\u267e\ufe0f Infinite"})}),"\n",(0,s.jsx)(t.p,{children:"Sometimes we want quests to be repeatable. There are multiple types of repeatable quests and here we'll cover examples on all of them. Let's start by making a new quest! This time one where the player needs to collect Sticks!"}),"\n",(0,s.jsx)(t.h2,{id:"-creating-sticks",children:"\ud83e\udeb5 Creating Sticks"}),"\n",(0,s.jsxs)(t.p,{children:["Let's create some sticks and tag them all with a tag called ",(0,s.jsx)(t.strong,{children:'"Stick"'})]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:n(68172).A+"",width:"1096",height:"569"})}),"\n",(0,s.jsx)(t.h2,{id:"-code",children:"\ud83d\udcbb Code"}),"\n",(0,s.jsx)(t.p,{children:"Great! Now that we have some sticks let's create a new script under ServerScriptService and add the following code:"}),"\n",(0,s.jsx)(t.h3,{id:"-make-sticks-collectible",children:"\ud83e\udeb5 Make Sticks collectible"}),"\n",(0,s.jsx)(t.p,{children:"Now that we created the sticks we want to make them collectible. For that you can use the following example code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'--Sticks.lua\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal CollectionService = game:GetService("CollectionService")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\n\nlocal function stickAdded(stick)\n\tlocal clone = stick:Clone()\n\tlocal proximityPrompt = Instance.new("ProximityPrompt")\n\tproximityPrompt.ActionText = "Collect Stick"\n\tproximityPrompt.HoldDuration = 0.25\n\t\n\tproximityPrompt.Triggered:Connect(function(player)\n\t\tstick:Destroy()\n\t\t\n\t\tRoQuest:AddObjective(player, "Stick", 1) -- Add to the quest\n\t\t\n\t\ttask.delay(5, function() -- Respawn after 5 seconds\n\t\t\tclone.Parent = workspace\n\t\tend)\n\tend)\n\t\n\tproximityPrompt.Parent = stick\nend\n\nCollectionService:GetInstanceAddedSignal("Stick"):Connect(stickAdded)\n\nfor _, stick in CollectionService:GetTagged("Stick") do\n\tstickAdded(stick)\nend\n'})}),"\n",(0,s.jsx)(t.p,{children:"The main take-away from here is the following function:"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:'RoQuest:AddObjective(player, "Stick", 1)'})}),"\n",(0,s.jsx)(t.p,{children:"What this function does is tell our quest system that hey the player just collected a stick"}),"\n",(0,s.jsx)(t.h3,{id:"-create-quest-objective",children:"\ud83c\udfaf Create Quest Objective"}),"\n",(0,s.jsx)(t.p,{children:"Now we need to create the actual quest. To create the actual quest we first need to make the objective required to complete this quest. I'd recommend creating this under ReplicatedStorage in its own folder for quest objectives. Here's an example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- StickInfo.lua\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\n\nlocal ObjectiveInfo = RoQuest.ObjectiveInfo\n\nreturn ObjectiveInfo.new {\n\tDescription = "%s/%s sticks collected",\n\tName = "Collect Sticks",\n\tObjectiveId = "Stick",\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"-create-quest",children:"\ud83d\udcdc Create Quest"}),"\n",(0,s.jsx)(t.p,{children:"And finally we need to create the actual quest object! For this let's make this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Stick.lua\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\nlocal stickObjective = require(ReplicatedStorage.QuestObjectives.StickInfo)\n\nlocal Quest = RoQuest.Quest\n\nreturn Quest {\n\tName = "Collect Sticks", -- The name of our quest\n\tDescription = "Collect 3 sticks", -- The description that we will display to our user\n\tQuestId = "StickCollection", -- A unique identifier to our quest\n\tQuestAcceptType = RoQuest.QuestAcceptType.Automatic, -- If the quest automatically gets accepted or rquires manual work\n\tQuestDeliverType = RoQuest.QuestDeliverType.Automatic, -- If the quest automatically gets delivered or requires manual work\n\tQuestRepeatableType = RoQuest.QuestRepeatableType.Infinite, -- If the quest can be repeated or not\n\tQuestStart = -1, -- UTC time to define when the quest should become available (specially useful for event quests)\n\tQuestEnd = -1, -- UTC time to define when the quest should no longer be available (specially useful for event quests)\n\tRequiredQuests = {}, -- A list of quests that are required to be delivered before this quest can be started\n\tLifeCycles = {}, -- The lifecycles that will manage this quest\'s behavior\n\tQuestObjectives = {\n\t\tstickObjective:NewObjective(3)\n\t}, \n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Please notice that we set the ",(0,s.jsx)(t.strong,{children:"QuestRepeatableType"})," to ",(0,s.jsx)(t.strong,{children:"Infinite"}),". Now if you hop into the game you can see you can complete this quest an infinite amount of times!"]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},68172:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/Sticks-4ffea4ba536276b942db27831f1a4c8b.png"},28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var i=n(96540);const s={},a=i.createContext(s);function c(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);