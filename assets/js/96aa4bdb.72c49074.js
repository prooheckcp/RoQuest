"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1628],{37424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"MyFirstQuest/WrapUp","title":"\ud83c\udfac Wrap Up","description":"\ud83c\udfaf Adding Objective to Quest","source":"@site/docs/MyFirstQuest/WrapUp.md","sourceDirName":"MyFirstQuest","slug":"/MyFirstQuest/WrapUp","permalink":"/RoQuest/docs/MyFirstQuest/WrapUp","draft":false,"unlisted":false,"editUrl":"https://github.com/prooheckcp/RoQuest/edit/master/docs/MyFirstQuest/WrapUp.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"\ud83c\udfac Wrap Up"},"sidebar":"defaultSidebar","previous":{"title":"\ud83c\udf4e Creating Object","permalink":"/RoQuest/docs/MyFirstQuest/CreatingObject"},"next":{"title":"\ud83d\udda5\ufe0f Making Quest UI","permalink":"/RoQuest/docs/MyFirstUI/MakingQuestUI"}}');var s=n(74848),a=n(28453);const r={sidebar_position:4,sidebar_label:"\ud83c\udfac Wrap Up"},i="\ud83c\udfac Wrap Up",u={},l=[{value:"\ud83c\udfaf Adding Objective to Quest",id:"-adding-objective-to-quest",level:2},{value:"\ud83d\udcbe Load quest into RoQuest",id:"-load-quest-into-roquest",level:2},{value:"\ud83d\udd0d Track Progress",id:"-track-progress",level:2}];function c(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"-wrap-up",children:"\ud83c\udfac Wrap Up"})}),"\n",(0,s.jsx)(t.h2,{id:"-adding-objective-to-quest",children:"\ud83c\udfaf Adding Objective to Quest"}),"\n",(0,s.jsxs)(t.p,{children:["Now that we have both our quest and objective done we need to add this to the quest. To do so you just need to require the quest objective. Once you did that you can call the function ",(0,s.jsx)(t.code,{children:":NewObjective(target)"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'-- Apple.lua\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\nlocal appleObjective = require(ReplicatedStorage.QuestObjectives.AppleInfo)\n\nlocal Quest = RoQuest.Quest\n\nreturn Quest {\n\tName = "Collect Apples", -- The name of our quest\n\tDescription = "Collect 2 apples", -- The description that we will display to our user\n\tQuestId = "AppleCollection", -- A unique identifier to our quest\n\tQuestAcceptType = RoQuest.QuestAcceptType.Automatic, -- If the quest automatically gets accepted or rquires manual work\n\tQuestDeliverType = RoQuest.QuestDeliverType.Automatic, -- If the quest automatically gets delivered or requires manual work\n\tQuestRepeatableType = RoQuest.QuestRepeatableType.NonRepeatable, -- If the quest can be repeated or not\n\tQuestStart = -1, -- UTC time to define when the quest should become available (specially useful for event quests)\n\tQuestEnd = -1, -- UTC time to define when the quest should no longer be available (specially useful for event quests)\n\tRequiredQuests = {}, -- A list of quests that are required to be delivered before this quest can be started\n\tLifeCycles = {"AppleQuest"}, -- The lifecycles that will manage this quest\'s behavior\n\tQuestObjectives = {\n\t\tappleObjective:NewObjective(2) -- Creates an objective with a goal of 2\n\t}, \n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"In the example above we created an objective with a goal of 2. Basically the player needs to collect 2 apples in order to complete this quest! A quest can contain an infinite amount of objects!"}),"\n",(0,s.jsx)(t.h2,{id:"-load-quest-into-roquest",children:"\ud83d\udcbe Load quest into RoQuest"}),"\n",(0,s.jsxs)(t.p,{children:["In the server-side, we now need to feed the quests into RoQuest in order for the library to know that they exist. Remember the ",":Init"," function? Yes, we passed an empty table into it! You should instead of an empty table, you should send an array with all your quests into it."]}),"\n",(0,s.jsx)(t.p,{children:"To help you doing this you can take advantage of a neat function called LoadDirectory. See the following example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\n\nRoQuest:Init(RoQuest:LoadDirectory(ReplicatedStorage.Quests))\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-track-progress",children:"\ud83d\udd0d Track Progress"}),"\n",(0,s.jsx)(t.p,{children:"Okay but now how do we know when the player completed the quest? We don't have any UI or feedback to indicate that! In the next section I'll teach you how to make a UI to track the quests and make your own quest log but for now let's just use some events to listen to changes to the quest."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["When accessing to anything from RoQuest the developer ",(0,s.jsx)(t.strong,{children:"shoud"})," use RoQuest.OnStart (returns a Promise) to ensure that the quest system has been initiated"]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-lua",children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\n\nRoQuest:Init(RoQuest:LoadDirectory(ReplicatedStorage.Quests))\n\nRoQuest.OnStart():andThen(function()\n\tRoQuest.OnQuestObjectiveChanged:Connect(function(player: Player, questId: string, objectiveId: string, newValue: number)\n\t\tprint(player.Name, " got ", newValue, objectiveId)\n\tend)\n\t\n\tRoQuest.OnQuestCompleted:Connect(function(player: Player, questId: string)\n\t\tprint(player.Name, " just completed the quest: ", questId)\n\tend)\nend)\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var o=n(96540);const s={},a=o.createContext(s);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);