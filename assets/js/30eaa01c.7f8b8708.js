"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3696],{22127:e=>{e.exports=JSON.parse('{"functions":[{"name":"OnStart","desc":"This is one of the most important methods of this Module. It is used\\nto ensure that your code is only called **after** the RoQuestClient has been initiated.\\n\\nIt is safe to get player data and quest data after this method has been called\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tprint(\\"RoQuestClient has been initiated!\\")\\n\\n\\tRoQuest.OnQuestStarted:Connect(function(questId: string)\\n\\t\\tprint(\\"Player has started the quest: \\", RoQuest:GetQuest(questId).Name)\\n\\tend)\\n\\n\\tRoQuest.OnQuestCompleted:Connect(function(questId: string)\\n\\t\\tprint(\\"Player has completed the quest: \\", RoQuest:GetQuest(questId).Name)\\n\\tend)\\nend)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","realm":["Client"],"source":{"line":470,"path":"RoQuest/Client/init.lua"}},{"name":"Init","desc":":::info\\n\\nThis function can and should only be called once. It is used to initialize the RoQuestClient\\n\\n:::\\n\\nFeed the lifecycles of our quests into the Module and initialize the RoQuestClient\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest:Init()\\n```","params":[{"name":"lifeCycles","desc":"","lua_type":"{QuestLifeCycle}?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"source":{"line":508,"path":"RoQuest/Client/init.lua"}},{"name":"LoadDirectory","desc":"Loads all the quests and lifecycles right under the given director and returns them in an array\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest:Init(RoQuest:LoadDirectory(ReplicatedStorage.Quests))\\n```","params":[{"name":"directory","desc":"","lua_type":"{Instance}"}],"returns":[{"desc":"Returns an array with either just Quests or QuestLifeCycles","lua_type":"{Quest | QuestLifeCycle}"}],"function_type":"method","realm":["Client"],"source":{"line":591,"path":"RoQuest/Client/init.lua"}},{"name":"LoadDirectoryDeep","desc":"Loads all the quests and lifecycles from the descendants of the directory and returns them in an array.\\nThe difference from :LoadDirectoryDeep and :LoadDirectory is that this one takes all descendants into account\\ninstead of just the children\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest:Init(RoQuest:LoadDirectoryDeep(ReplicatedStorage.Quests))\\n```","params":[{"name":"directory","desc":"","lua_type":"{Instance}"}],"returns":[{"desc":"Returns an array with either just Quests or QuestLifeCycles","lua_type":"{Quest | QuestLifeCycle}"}],"function_type":"method","realm":["Client"],"source":{"line":613,"path":"RoQuest/Client/init.lua"}},{"name":"GetStaticQuest","desc":"Gets the static data of a cached quest\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quest: Quest? = RoQuest:GetStaticQuest(\\"QuestId\\")\\n\\n\\tif quest then\\n\\t\\tprint(quest.Name)\\n\\tend\\nend)\\n```","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Quest?"}],"function_type":"method","realm":["Client"],"source":{"line":638,"path":"RoQuest/Client/init.lua"}},{"name":"GetStaticQuests","desc":"Gets the static data of all of the cached quests\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetStaticQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do -- Prints the name of all the quests\\n\\t\\tprint(quest.Name)\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":667,"path":"RoQuest/Client/init.lua"}},{"name":"GetQuest","desc":"Gets a player quest object. It will return nil if the player has never started\\nthe quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quest: Quest? = RoQuest:GetQuest(\\"QuestId\\")\\n\\n\\tif quest then\\n\\t\\tprint(quest.Name)\\n\\telse\\n\\t\\tprint(\\"Player never started this quest!\\")\\n\\tend\\nend)\\n```","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Quest?"}],"function_type":"method","realm":["Client"],"source":{"line":696,"path":"RoQuest/Client/init.lua"}},{"name":"GetQuests","desc":"Gets all the quests from the player. This includes quests InProgress, Completed and Delivered\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do\\n\\t\\tprint(quest.Name)\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":721,"path":"RoQuest/Client/init.lua"}},{"name":"GetCompletedQuests","desc":"Gets all the quests that have already been completed by the player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetCompletedQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do\\n\\t\\tprint(quest.Name, \\" is completed!\\")\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":746,"path":"RoQuest/Client/init.lua"}},{"name":"GetDeliveredQuests","desc":"Gets all the quests that have already been delivered by the player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetDeliveredQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do\\n\\t\\tprint(quest.Name, \\" is delivered!\\")\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":779,"path":"RoQuest/Client/init.lua"}},{"name":"GetInProgressQuests","desc":"Gets all the quests that the player currently has in progress\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetInProgressQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do\\n\\t\\tprint(quest.Name, \\" is in progress!\\")\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":812,"path":"RoQuest/Client/init.lua"}},{"name":"GetAvailableQuests","desc":"Gets all the available quests that the player currently has\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetAvailableQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do\\n\\t\\tprint(quest.Name, \\" is available!\\")\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":845,"path":"RoQuest/Client/init.lua"}},{"name":"GetUnAvailableQuests","desc":"Gets all the unavailable quests that the player currently has\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tlocal quests: {[string]: Quest} = RoQuest:GetUnAvailableQuests()\\n\\n\\tfor questId: string, quest: Quest in pairs(quests) do\\n\\t\\tprint(quest.Name, \\" is unavailable!\\")\\n\\tend\\nend)\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Client"],"source":{"line":876,"path":"RoQuest/Client/init.lua"}},{"name":"CanGiveQuest","desc":"Checks if the player can accept the quest or not\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnStart():andThen(function()\\n\\tif RoQuest:CanGiveQuest(\\"QuestId\\") then\\n\\t\\tprint(\\"Player can accept the quest!\\")\\n\\telse\\n\\t\\tprint(\\"Player cannot accept the quest!\\")\\n\\tend\\nend)\\n```","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"If we can or not give the quest to the player","lua_type":"boolean"}],"function_type":"method","realm":["Client"],"source":{"line":908,"path":"RoQuest/Client/init.lua"}},{"name":"GetQuestStatus","desc":"Get the quest status","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"QuestStatus"}],"function_type":"method","realm":["Client"],"source":{"line":920,"path":"RoQuest/Client/init.lua"}},{"name":"GetLifeCycle","desc":"Gets a lifecycle object from a quest by the name","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"lifeCycleName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"QuestLifeCycle?"}],"function_type":"method","realm":["Client"],"source":{"line":939,"path":"RoQuest/Client/init.lua"}},{"name":"_LoadQuests","desc":"Used to update all the static quests that are cached in our quest system","params":[{"name":"questsData","desc":"","lua_type":"{[string]: any}"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":957,"path":"RoQuest/Client/init.lua"}},{"name":"_OnPlayerDataChanged","desc":"Called whenever the server informs the client that the player data has been hard\\nresetted. This usually happens when the player joins the game or when the server\\ndecides to reset the player data","params":[{"name":"playerQuestData","desc":"","lua_type":"PlayerQuestData"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":980,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestObjectiveChanged","desc":"Called whenever the server informs the client that the quest objectives have been updated","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"objectiveId","desc":"","lua_type":"string"},{"name":"newAmount","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1011,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestStarted","desc":"Called whenever the server informs the client that the quest has been started","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"questProgress","desc":"","lua_type":"QuestProgress?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1035,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestCompleted","desc":"Called whenever the server informs the client that the quest has been completed","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1050,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestDelivered","desc":"Called whenever the server informs the client that the quest has been delivered","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1070,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestCancelled","desc":"Called whenever the server informs the client that the quest has been cancelled","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1090,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestAvailable","desc":"Called whenever the server informs the client that the quest became available","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1116,"path":"RoQuest/Client/init.lua"}},{"name":"_OnQuestUnavailable","desc":"Called whenever the server informs the client that the quest became unavailable","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1131,"path":"RoQuest/Client/init.lua"}},{"name":"_ChangeAvailableState","desc":"Called whenever we need to update the status of a quest that was available","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"state","desc":"","lua_type":"true?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1147,"path":"RoQuest/Client/init.lua"}},{"name":"_ChangeUnAvailableState","desc":"Called whenever we need to update the status of a quest that was unavailable","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"state","desc":"","lua_type":"true?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1173,"path":"RoQuest/Client/init.lua"}},{"name":"_ChangeCompletedQuest","desc":"Called whenever we need to update the progress of a quest that was completed","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"questProgress","desc":"","lua_type":"QuestProgress?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1193,"path":"RoQuest/Client/init.lua"}},{"name":"_ChangeDeliveredQuest","desc":"Called whenever we need to update the progress of a quest that was delivered","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"questProgress","desc":"","lua_type":"QuestProgress?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1213,"path":"RoQuest/Client/init.lua"}},{"name":"_ChangeInProgressQuest","desc":"Called whenever we need to update the progress of a quest that is in progress","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"questProgress","desc":"","lua_type":"QuestProgress?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1233,"path":"RoQuest/Client/init.lua"}},{"name":"_GiveQuest","desc":"Called whenever the server informs our client that a quest has been started","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"questProgress","desc":"","lua_type":"QuestProgress?"}],"returns":[{"desc":"If it managed to give the quest to the player or not","lua_type":"boolean"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1253,"path":"RoQuest/Client/init.lua"}},{"name":"_QuestCompleted","desc":"Called whenever the server informs our client that a quest has been completed","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1323,"path":"RoQuest/Client/init.lua"}},{"name":"_QuestDelivered","desc":"Called whenever the server informs our client that a quest has been delivered","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1344,"path":"RoQuest/Client/init.lua"}},{"name":"_CreateLifeCycle","desc":"Creates a new lifecycle object for the given quest","params":[{"name":"quest","desc":"","lua_type":"Quest"},{"name":"lifeCycleName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1365,"path":"RoQuest/Client/init.lua"}},{"name":"_CallLifeCycle","desc":"Calls a lifecycle method and runs it at a different thread","params":[{"name":"questId","desc":"","lua_type":"string"},{"name":"lifeCycleName","desc":"","lua_type":"string"},{"name":"methodName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1419,"path":"RoQuest/Client/init.lua"}},{"name":"_LoadLifeCycles","desc":"Loads all the lifecycles into the cache","params":[{"name":"lifecycles","desc":"","lua_type":"{QuestLifeCycle}"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Client"],"private":true,"source":{"line":1443,"path":"RoQuest/Client/init.lua"}}],"properties":[{"name":"OnPlayerDataChanged","desc":"Called whenever the player data gets changed. This should only happen when the\\nserver decides to completely overwrite the player data. \\n\\nShould be used to reset data on the UI and/or other client-sided displays\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnPlayerDataChanged:Connect(function(playerQuestData: PlayerQuestData)\\n\\tself:SetAllScreens(playerQuestData)\\nend) -- Hard reset our screens\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":86,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestObjectiveChanged","desc":"Called when one of the quest\'s objective gets changed. Useful to update UI elements\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnQuestObjectiveChanged:Connect(function(questId: string, objectiveId: string, newValue: number)\\n\\tself:UpdateObjective(RoQuest:GetQuest(questId), objectiveId, newValue)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":104,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestStarted","desc":"Called whenever the player starts a new quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnQuestStarted:Connect(function(questId: string)\\n\\tprint(\\"Player has started the quest: \\", RoQuest:GetQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":122,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestCompleted","desc":"Called whenever the player completes a quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnQuestCompleted:Connect(function(questId: string)\\n\\tprint(\\"Player has completed the quest: \\", RoQuest:GetQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":140,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestDelivered","desc":"Called whenever the player delivers a quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnQuestDelivered:Connect(function(questId: string)\\n\\tprint(\\"Player has delivered the quest: \\", RoQuest:GetQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":158,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestCancelled","desc":"Called whenever a quest gets cancelled. This might happen when a player\\nasks to cancel a quest or the developer disables a quest at run-time (per example when an\\nevent finishes)\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnQuestCancelled:Connect(function(questId: string)\\n\\tprint(\\"The following quest just got removed: \\", RoQuest:GetQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":178,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestAvailable","desc":"This gets called when a quest becomes available. This usually means that the player\\ncan now accept this quest at a given quest giver\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnQuestAvailable:Connect(function(questId: string)\\n\\tprint(\\"The following quest just became available: \\", RoQuest:GetQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":197,"path":"RoQuest/Client/init.lua"}},{"name":"OnQuestUnavailable","desc":"This gets called when a quest becomes unavailable. Usually only happens when a quest\\ngets disabled at run-time or when the quest\'s end time has passed \\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestUnavailable:Connect(function(questId: string)\\n\\tprint(\\"The player\'s quest has just been cancelled: \\", RoQuest:GetStaticQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":216,"path":"RoQuest/Client/init.lua"}},{"name":"OnUnAvailableQuestChanged","desc":"This gets called whenever the quests that are unavailable changes.\\nThis means that either a quest just became available OR that a quest became\\nunavailable (such as a quest with an end time)\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnUnAvailableQuestChanged:Connect(function()\\n\\tprint(self:GetUnAvailableQuests())\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":236,"path":"RoQuest/Client/init.lua"}},{"name":"OnAvailableQuestChanged","desc":"This gets called whenever the quests that are available changes.\\nCalled when one of the available quests becomes unavailable or when a quest\\ngets started by the player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnAvailableQuestChanged:Connect(function()\\n\\tprint(self:GetAvailableQuests())\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":256,"path":"RoQuest/Client/init.lua"}},{"name":"OnCompletedQuestChanged","desc":"This gets called whenever the quests that are completed changes.\\nThis gets called when either a quest got delivered, a quest just got completed\\nor somehow the quest got cancelled while completed\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnCompletedQuestChanged:Connect(function()\\n\\tprint(self:GetCompletedQuests())\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":276,"path":"RoQuest/Client/init.lua"}},{"name":"OnDeliveredQuestChanged","desc":"This gets called whenever the quests that are delivered changes.\\nThis gets called when either a quest got delivered or a delivered quest gets restarted\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnDeliveredQuestChanged:Connect(function()\\n\\tprint(self:GetDeliveredQuests())\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":295,"path":"RoQuest/Client/init.lua"}},{"name":"OnInProgressQuestChanged","desc":"This gets called whenever the quests that are in progress change.\\nThis gets called when either a quest got completed or started by the player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest.OnInProgressQuestChanged:Connect(function()\\n\\tprint(self:GetInProgressQuests())\\nend)\\n```","lua_type":"Signal","realm":["Client"],"source":{"line":314,"path":"RoQuest/Client/init.lua"}},{"name":"Quest","desc":"This is a reference to our Quest class","lua_type":"Quest","realm":["Client"],"source":{"line":322,"path":"RoQuest/Client/init.lua"}},{"name":"QuestLifeCycle","desc":"This is a reference to our QuestLifeCycle class","lua_type":"QuestLifeCycle","realm":["Client"],"source":{"line":330,"path":"RoQuest/Client/init.lua"}},{"name":"ObjectiveInfo","desc":"This is a reference to our ObjectiveInfo class","lua_type":"ObjectiveInfo","realm":["Client"],"source":{"line":338,"path":"RoQuest/Client/init.lua"}},{"name":"QuestAcceptType","desc":"This is a reference to our QuestAcceptType enum","lua_type":"QuestAcceptType","realm":["Client"],"source":{"line":346,"path":"RoQuest/Client/init.lua"}},{"name":"QuestDeliverType","desc":"This is a reference to our QuestDeliverType enum","lua_type":"QuestDeliverType","realm":["Client"],"source":{"line":354,"path":"RoQuest/Client/init.lua"}},{"name":"QuestRepeatableType","desc":"This is a reference to our QuestRepeatableType enum","lua_type":"QuestRepeatableType","realm":["Client"],"source":{"line":362,"path":"RoQuest/Client/init.lua"}},{"name":"QuestStatus","desc":"This is a reference to our QuestStatus enum","lua_type":"QuestStatus","realm":["Client"],"source":{"line":370,"path":"RoQuest/Client/init.lua"}},{"name":"_Initiated","desc":"Debounce for our :Init function","lua_type":"boolean","realm":["Client"],"private":true,"source":{"line":379,"path":"RoQuest/Client/init.lua"}},{"name":"_StaticQuestLifeCycles","desc":"A cache with all of the quest lifecycles that were fed into the system","lua_type":"{[string]: QuestLifeCycle}","realm":["Client"],"private":true,"source":{"line":388,"path":"RoQuest/Client/init.lua"}},{"name":"_StaticQuests","desc":"A cache with all of the quests that were fed into the system","lua_type":"{[string]: Quest}","realm":["Client"],"private":true,"source":{"line":397,"path":"RoQuest/Client/init.lua"}},{"name":"_Quests","desc":"A cache with all of the quests that the player is currently engaged on","lua_type":"{[string]: Quest}","realm":["Client"],"private":true,"source":{"line":406,"path":"RoQuest/Client/init.lua"}},{"name":"_AvailableQuests","desc":"A cache with all the IDs of quests that are available for our player","lua_type":"{[string]: true}","realm":["Client"],"private":true,"source":{"line":415,"path":"RoQuest/Client/init.lua"}},{"name":"_UnavailableQuests","desc":"A cache with all the IDs of quests that are unavailable for our player","lua_type":"{[string]: true}","realm":["Client"],"private":true,"source":{"line":424,"path":"RoQuest/Client/init.lua"}},{"name":"_PlayerQuestData","desc":"The cached dynamic data from our player","lua_type":"PlayerQuestData","realm":["Client"],"private":true,"source":{"line":433,"path":"RoQuest/Client/init.lua"}},{"name":"_LifeCycles","desc":"Caches all the lifecycles of the quests that the players are currently engaged with","lua_type":"{[string]: {[string]: QuestLifeCycle}}","realm":["Client"],"private":true,"source":{"line":442,"path":"RoQuest/Client/init.lua"}}],"types":[],"name":"RoQuestClient","desc":":::info\\n\\nThe client-side only has access to the data and cannot modify it directly (to avoid exploits).\\nIf you wish to modify data you should do it through the server-side API.\\n\\n:::\\n\\n\\nThis is the main Module for the RoQuest Client-side. \\nThis is the module developers have access to and can use\\nto interact with the libraries\' API from the client-side.\\n\\nThis module gives access to the developer to properly update his quest logs and/or play\\nanimations and modify client-sided behavior of our quests! \\n\\nAll the quest data is by default replicated from the server-side into this module using\\nthe Red library. This means that all the data is up-to-date and can be used to update the player\'s\\nUI or any other client-sided behavior.\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Client\\n\\nRoQuest:Init()\\n```","realm":["Client"],"source":{"line":65,"path":"RoQuest/Client/init.lua"}}')}}]);