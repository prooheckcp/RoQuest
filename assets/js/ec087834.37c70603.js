"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5186],{32298:e=>{e.exports=JSON.parse('{"functions":[{"name":"OnStart","desc":"This is one of the most important methods of this Module. It is used\\nto ensure that your code is only called **after** the RoQuestServer has been initiated.\\n\\nIt is safe to get player data and quest data after this method has been called\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnStart():andThen(function()\\n\\tprint(\\"RoQuestServer has been initiated!\\")\\n\\n\\tRoQuest.OnQuestStarted:Connect(function(player: Player, questId: string)\\n\\tprint(player.Name, \\"has just started the quest: \\", RoQuest:GetStaticQuest(questId).Name, \\"!\\")\\n\\tend)\\n\\n\\tRoQuest.OnQuestCompleted:Connect(function(player: Player, questId: string)\\n\\t\\tprint(player.Name, \\"has just completed the quest: \\", RoQuest:GetStaticQuest(questId).Name, \\"!\\")\\n\\tend)\\nend)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","realm":["Server"],"source":{"line":419,"path":"RoQuest/Server/init.lua"}},{"name":"Init","desc":":::info\\n\\nThis function should only get called once in the server-side. It will initialize our quest system and start listening to player events\\n\\n:::\\n\\nInitiates our quest system and feeds it all the data about the quests and lifecycles\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest:Init(RoQuest:LoadDirectory(ReplicatedStorage.Quests))\\n```","params":[{"name":"quests","desc":"","lua_type":"{Quest}"},{"name":"lifeCycles","desc":"","lua_type":"{QuestLifeCycle}?"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"source":{"line":457,"path":"RoQuest/Server/init.lua"}},{"name":"LoadDirectory","desc":"Loads all the quests and lifecycles right under the given director and returns them in an array\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest:Init(RoQuest:LoadDirectory(ReplicatedStorage.Quests))\\n```","params":[{"name":"directory","desc":"","lua_type":"{Instance}"}],"returns":[{"desc":"Returns an array with either just Quests or QuestLifeCycles","lua_type":"{Quest | QuestLifeCycle}"}],"function_type":"method","realm":["Server"],"source":{"line":565,"path":"RoQuest/Server/init.lua"}},{"name":"LoadDirectoryDeep","desc":"Loads all the quests and lifecycles from the descendants of the directory and returns them in an array.\\nThe difference from :LoadDirectoryDeep and :LoadDirectory is that this one takes all descendants into account\\ninstead of just the children\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest:Init(RoQuest:LoadDirectoryDeep(ReplicatedStorage.Quests))\\n```","params":[{"name":"directory","desc":"","lua_type":"{Instance}"}],"returns":[{"desc":"Returns an array with either just Quests or QuestLifeCycles","lua_type":"{Quest | QuestLifeCycle}"}],"function_type":"method","realm":["Server"],"source":{"line":587,"path":"RoQuest/Server/init.lua"}},{"name":"GetStaticQuest","desc":"Gets the static data of a cached quest by the given ID\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nlocal quest: Quest = RoQuest:GetStaticQuest(\\"QuestId\\")\\n```","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Quest?"}],"function_type":"method","realm":["Server"],"source":{"line":607,"path":"RoQuest/Server/init.lua"}},{"name":"GetStaticQuests","desc":"Gets the static data of all of the cached quests\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nlocal quests: {[string]: Quest} = RoQuest:GetStaticQuests()\\n```","params":[],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":632,"path":"RoQuest/Server/init.lua"}},{"name":"GetQuest","desc":":::info\\n\\nThis function returns a quest object if the status of the quest is InProgress, Completed or Delivered\\n\\n:::\\n\\nGets a player quest object. It will return nil if the player has never started\\nthe quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal quest: Quest? = RoQuest:GetQuest(player, \\"QuestId\\")\\n--...\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Quest?"}],"function_type":"method","realm":["Server"],"source":{"line":662,"path":"RoQuest/Server/init.lua"}},{"name":"GetQuests","desc":":::info\\n\\nThis function returns all the quests of the status of the quest is InProgress, Completed or Delivered\\n\\n:::\\n\\nReturns all the quests of the given player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal quests: {[string]: Quest} = RoQuest:GetQuests(player)\\n--...\\n```","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":690,"path":"RoQuest/Server/init.lua"}},{"name":"GetCompletedQuests","desc":"Gets all the completed quests by the given player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal completedQuests: {[string]: Quest} = RoQuest:GetCompletedQuests(player)\\nprint(completeQuests) -- {QuestId = QuestObject, QuestId2 = QuestObject2, ...}\\n--...\\n```","params":[{"name":"player","desc":"The player that owns all the quests","lua_type":"Player"}],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":713,"path":"RoQuest/Server/init.lua"}},{"name":"GetDeliveredQuests","desc":"Gets all the delivered quests by the given player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal deliveredQuests: {[string]: Quest} = RoQuest:GetDeliveredQuests(player)\\nprint(deliveredQuests) -- {QuestId = QuestObject, QuestId2 = QuestObject2, ...}\\n--...\\n```","params":[{"name":"player","desc":"The player that owns all the quests","lua_type":"Player"}],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":742,"path":"RoQuest/Server/init.lua"}},{"name":"GetInProgressQuests","desc":"Gets all the quests that are in progress by the given player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal questsInProgress: {[string]: Quest} = RoQuest:GetInProgressQuests(player)\\nprint(questsInProgress) -- {QuestId = QuestObject, QuestId2 = QuestObject2, ...}\\n--...\\n```","params":[{"name":"player","desc":"The player that owns all the quests","lua_type":"Player"}],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":771,"path":"RoQuest/Server/init.lua"}},{"name":"GetAvailableQuests","desc":"Gets all the quests that are available to the player. This means that the player can start the quest\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal availableQuests: {[string]: Quest} = RoQuest:GetAvailableQuests(player)\\nprint(availableQuests) -- {QuestId = QuestObject, QuestId2 = QuestObject2, ...}\\n--...\\n```","params":[{"name":"player","desc":"The player that owns all the quests","lua_type":"Player"}],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":800,"path":"RoQuest/Server/init.lua"}},{"name":"GetUnAvailableQuests","desc":"Gets all the quests that are unavailable to the player. This means that the player can\'t start the quest\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal unavailableQuests: {[string]: Quest} = RoQuest:GetUnAvailableQuests(player)\\nprint(unavailableQuests) -- {QuestId = QuestObject, QuestId2 = QuestObject2, ...}\\n--...\\n```","params":[{"name":"player","desc":"The player that owns all the quests","lua_type":"Player"}],"returns":[{"desc":"<questId: string, quest: Quest>","lua_type":"{[string]: Quest}"}],"function_type":"method","realm":["Server"],"source":{"line":829,"path":"RoQuest/Server/init.lua"}},{"name":"SetPlayerData","desc":"Sets the player data. This will overwrite the current player data with the given data\\n\\n:::warning\\n\\nThis should only be used when loading a player. It should be avoided at all costs unless\\ncompletely necessary\\n\\n:::\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:SetPlayerData(player, playerQuestData)\\n--...\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"data","desc":"","lua_type":"PlayerQuestData"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"source":{"line":865,"path":"RoQuest/Server/init.lua"}},{"name":"GetPlayerData","desc":"Gets the player data. This is how we are capable of retreiving data to use when\\nstoring it to a DataStore\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal playerData: PlayerQuestData = RoQuest:GetPlayerData(player)\\n--...\\n```","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"PlayerQuestData"}],"function_type":"method","realm":["Server"],"source":{"line":890,"path":"RoQuest/Server/init.lua"}},{"name":"GetObjective","desc":"Gets the current value of the quest\'s objective. This will return 0 if the quest doesn\'t exist\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nlocal objectiveValue: number = RoQuest:GetObjective(player, \\"QuestId\\", \\"ObjectiveId\\")\\n--...\\n```","params":[{"name":"player","desc":"The player that owns the quest","lua_type":"Player"},{"name":"questId","desc":"The ID of our objective","lua_type":"string"},{"name":"objectiveId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","realm":["Server"],"source":{"line":914,"path":"RoQuest/Server/init.lua"}},{"name":"AddObjective","desc":"Adds X amount from all the quests that contain the given objective ID\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:AddObjective(player, \\"ObjectiveId\\", 5)\\n--...\\n```","params":[{"name":"player","desc":"The player that owns the quests","lua_type":"Player"},{"name":"objectiveId","desc":"The ID of our objective","lua_type":"string"},{"name":"amount","desc":"The amount we want to increment to the objective of our quests","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"source":{"line":944,"path":"RoQuest/Server/init.lua"}},{"name":"SetObjective","desc":"Sets all the quests that contain the given objective ID to the given amount\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:GetObjective(player, \\"questId\\", \\"ObjectiveId\\") -- 0\\nRoQuest:SetObjective(player, \\"ObjectiveId\\", 5)\\nRoQuest:GetObjective(player, \\"questId\\", \\"ObjectiveId\\") -- 5\\n--...\\n```","params":[{"name":"player","desc":"The player that owns the quests","lua_type":"Player"},{"name":"objectiveId","desc":"The ID of our objective","lua_type":"string"},{"name":"amount","desc":"The amount to which the objective should be set to","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"source":{"line":982,"path":"RoQuest/Server/init.lua"}},{"name":"RemoveObjective","desc":"Removes X amount from all the quests that contain the given objective ID\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:RemoveObjective(player, \\"ObjectiveId\\", 5)\\n--...\\n```","params":[{"name":"player","desc":"The player that owns the quests","lua_type":"Player"},{"name":"objectiveId","desc":"The ID of our objective","lua_type":"string"},{"name":"amount","desc":"The amount we want to decrement to the objective of our quests","lua_type":"number"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"source":{"line":1018,"path":"RoQuest/Server/init.lua"}},{"name":"GiveQuest","desc":"Gives the quest to the player for him to start. Usually used when quests are set \\nto manual mode\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:GiveQuest(player, \\"QuestId\\")\\n--...\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"If it managed to give the player the quest or not","lua_type":"boolean"}],"function_type":"method","realm":["Server"],"source":{"line":1054,"path":"RoQuest/Server/init.lua"}},{"name":"CompleteQuest","desc":"Completes the quest of a player instantly. This will not deliver the quest unless deliver\\nis set to automatically\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:CompleteQuest(player, \\"QuestId\\")\\n--...\\n\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"If it managed to complete the quest or not","lua_type":"boolean"}],"function_type":"method","realm":["Server"],"source":{"line":1089,"path":"RoQuest/Server/init.lua"}},{"name":"DeliverQuest","desc":"Delivers the quest of a player\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:DeliverQuest(player, \\"QuestId\\")\\n--...\\n\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"If it managed to deliver the quest or not","lua_type":"boolean"}],"function_type":"method","realm":["Server"],"source":{"line":1119,"path":"RoQuest/Server/init.lua"}},{"name":"CancelQuest","desc":"Cancels the quest of a player. This will remove the quest from the player\'s cache\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\n--...\\nRoQuest:CancelQuest(player, \\"QuestId\\")\\n--...\\n\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"If it managed to cancel the quest or not","lua_type":"boolean"}],"function_type":"method","realm":["Server"],"source":{"line":1149,"path":"RoQuest/Server/init.lua"}},{"name":"CanGiveQuest","desc":"Checks if the player can or not accept the quest\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nlocal player: Player = game.Players:GetPlayers()[1]\\n\\nif RoQuest:CanGiveQuest(player, \\"QuestId\\") then\\n\\tprint(\\"Player can accept the quest!\\")\\nelse\\n\\tprint(\\"Player can\'t accept the quest!\\")\\nend\\n```","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"If the player can accept the quest or not","lua_type":"boolean"}],"function_type":"method","realm":["Server"],"source":{"line":1187,"path":"RoQuest/Server/init.lua"}},{"name":"MakeQuestAvailable","desc":":::warning\\n\\nThis can only be called if the quest repeatable type is set to Custom\\n\\n:::","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"source":{"line":1236,"path":"RoQuest/Server/init.lua"}},{"name":"GetQuestStatus","desc":"Get the quest status","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"QuestStatus"}],"function_type":"method","realm":["Server"],"source":{"line":1266,"path":"RoQuest/Server/init.lua"}},{"name":"GetLifeCycle","desc":"Gets a lifecycle object from a quest by the name","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"},{"name":"lifeCycleName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"QuestLifeCycle?"}],"function_type":"method","realm":["Server"],"source":{"line":1286,"path":"RoQuest/Server/init.lua"}},{"name":"_QuestCompleted","desc":"Called when a quest gets completed. Updates the cache about the quest status","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1304,"path":"RoQuest/Server/init.lua"}},{"name":"_QuestDelivered","desc":"Called when a quest gets delivered. Updates the cache about the quest status","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1325,"path":"RoQuest/Server/init.lua"}},{"name":"_WaitForPlayerToLoad","desc":"Yields until the player finishes loading","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"yields":true,"source":{"line":1361,"path":"RoQuest/Server/init.lua"}},{"name":"_QuestBecameAvailable","desc":"Called whenever a quest became available to update our cache","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1376,"path":"RoQuest/Server/init.lua"}},{"name":"_QuestBecameUnavailable","desc":"Called whenever a quest became unavailable to update our cache","params":[{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1397,"path":"RoQuest/Server/init.lua"}},{"name":"_GiveQuest","desc":"If possible we\'ll give the quest to the player","params":[{"name":"player","desc":"The player that should receive the quest","lua_type":"Player"},{"name":"questId","desc":"The ID of the quest","lua_type":"string"},{"name":"questProgress","desc":"The progress of the quest if there was already any","lua_type":"QuestProgress?"}],"returns":[{"desc":"If it managed to give the quest to the player or not","lua_type":"boolean"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1422,"path":"RoQuest/Server/init.lua"}},{"name":"_LoadPlayerData","desc":"Loads all the quests for the given player","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1502,"path":"RoQuest/Server/init.lua"}},{"name":"_NewPlayerAvailableQuest","desc":"Checks if the player can accept the quest and if so, gives it to the player","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1537,"path":"RoQuest/Server/init.lua"}},{"name":"_CreateLifeCycle","desc":"Creates a new lifecycle object for the given quest","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"quest","desc":"","lua_type":"Quest"},{"name":"lifeCycleName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1578,"path":"RoQuest/Server/init.lua"}},{"name":"_CallLifeCycle","desc":"Calls a lifecycle method and runs it at a different thread","params":[{"name":"player","desc":"","lua_type":"Player"},{"name":"questId","desc":"","lua_type":"string"},{"name":"lifeCycleName","desc":"","lua_type":"string"},{"name":"methodName","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1633,"path":"RoQuest/Server/init.lua"}},{"name":"_LoadQuests","desc":"Loads all the quests into the cache","params":[{"name":"quests","desc":"","lua_type":"{Quest}"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1657,"path":"RoQuest/Server/init.lua"}},{"name":"_LoadLifeCycles","desc":"Loads all the lifecycles into the cache","params":[{"name":"lifecycles","desc":"","lua_type":"{QuestLifeCycle}"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1720,"path":"RoQuest/Server/init.lua"}},{"name":"_PlayerAdded","desc":"Called whenever the player joins the game and initiates the cache for the player","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1743,"path":"RoQuest/Server/init.lua"}},{"name":"_PlayerRemoving","desc":"Called 5 seconds after the player leaves the game. Used to clear the cache of the player","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"()"}],"function_type":"method","realm":["Server"],"private":true,"source":{"line":1763,"path":"RoQuest/Server/init.lua"}}],"properties":[{"name":"OnPlayerDataChanged","desc":"Called whenever the player data gets changed. This should only happen when we decide \\nto completely overwrite the player data\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnPlayerDataChanged:Connect(function(player: Player, playerQuestData: PlayerQuestData)\\n\\tself:SetAllScreens(playerQuestData)\\nend) -- Hard reset our screens\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":75,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestObjectiveChanged","desc":"Called when one of the quest\'s objective gets changed\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestObjectiveChanged:Connect(function(player: Player, questId: string, objectiveId: string, newValue: number)\\n\\tself:UpdateObjective(RoQuest:GetQuest(player, questId), objectiveId, newValue)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":93,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestStarted","desc":"Called whenever the player starts a new quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestStarted:Connect(function(player: Player, questId: string)\\n\\tprint(\\"Player has started the quest: \\", RoQuest:GetQuest(player, questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":111,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestCompleted","desc":"Called whenever the player completes a quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestCompleted:Connect(function(player: Player, questId: string)\\n\\tprint(\\"Player has completed the quest: \\", RoQuest:GetQuest(player, questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":129,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestDelivered","desc":"Called whenever the player delivers a quest!\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestDelivered:Connect(function(player: Player, questId: string)\\n\\tprint(\\"Player has delivered the quest: \\", RoQuest:GetQuest(player, questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":147,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestCancelled","desc":"Called whenever a quest gets cancelled. This might happen when a player\\nasks to cancel a quest or the developer disables a quest at run-time (per example when an\\nevent finishes)\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestCancelled:Connect(function(player: Player, questId: string)\\n\\tprint(\\"The following quest just got removed: \\", RoQuest:GetQuest(player, questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":167,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestAvailable","desc":"This gets called when a quest becomes available. This usually means that the player\\ncan now accept this quest at a given quest giver\\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestAvailable:Connect(function(questId: string)\\n\\tprint(\\"The following quest just became available: \\", RoQuest:GetQuest(player, questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":186,"path":"RoQuest/Server/init.lua"}},{"name":"OnQuestUnavailable","desc":"This gets called when a quest becomes unavailable. Usually only happens when a quest\\ngets disabled at run-time or when the quest\'s end time has passed \\n\\n```lua\\nlocal ReplicatedStorage = game:GetService(\\"ReplicatedStorage\\")\\n\\nlocal RoQuest = require(ReplicatedStorage.RoQuest).Server\\n\\nRoQuest.OnQuestUnavailable:Connect(function(player: Player, questId: string)\\n\\tprint(\\"The player\'s quest has just been cancelled: \\", RoQuest:GetStaticQuest(questId).Name)\\nend)\\n```","lua_type":"Signal","realm":["Server"],"source":{"line":205,"path":"RoQuest/Server/init.lua"}},{"name":"PlayerQuestData","desc":"This is a reference to our PlayerQuestData struct","lua_type":"PlayerQuestData","realm":["Server"],"source":{"line":213,"path":"RoQuest/Server/init.lua"}},{"name":"Quest","desc":"This is a reference to our Quest class","lua_type":"Quest","realm":["Server"],"source":{"line":221,"path":"RoQuest/Server/init.lua"}},{"name":"QuestLifeCycle","desc":"This is a reference to our QuestLifeCycle class","lua_type":"QuestLifeCycle","realm":["Server"],"source":{"line":229,"path":"RoQuest/Server/init.lua"}},{"name":"ObjectiveInfo","desc":"This is a reference to our ObjectiveInfo class","lua_type":"ObjectiveInfo","realm":["Server"],"source":{"line":237,"path":"RoQuest/Server/init.lua"}},{"name":"QuestAcceptType","desc":"This is a reference to our QuestAcceptType enum","lua_type":"QuestAcceptType","realm":["Server"],"source":{"line":245,"path":"RoQuest/Server/init.lua"}},{"name":"QuestDeliverType","desc":"This is a reference to our QuestDeliverType enum","lua_type":"QuestDeliverType","realm":["Server"],"source":{"line":253,"path":"RoQuest/Server/init.lua"}},{"name":"QuestRepeatableType","desc":"This is a reference to our QuestRepeatableType enum","lua_type":"QuestRepeatableType","realm":["Server"],"source":{"line":261,"path":"RoQuest/Server/init.lua"}},{"name":"QuestStatus","desc":"This is a reference to our QuestStatus enum","lua_type":"QuestStatus","realm":["Server"],"source":{"line":269,"path":"RoQuest/Server/init.lua"}},{"name":"_Initiated","desc":"Debounce for our :Init function","lua_type":"boolean","realm":["Server"],"private":true,"source":{"line":278,"path":"RoQuest/Server/init.lua"}},{"name":"_StaticQuests","desc":"Caches all the static data from all the quests","lua_type":"{[string]: Quest}","realm":["Server"],"private":true,"source":{"line":287,"path":"RoQuest/Server/init.lua"}},{"name":"_RequiredQuestPointer","desc":"This is a pointer that allows us to quickly check with O(1) \\ncomplexity on which quests are required to start a quest","lua_type":"{[string]: {[string]: true}}","realm":["Server"],"private":true,"source":{"line":297,"path":"RoQuest/Server/init.lua"}},{"name":"_StaticNetworkParse","desc":"Caches the data that we want to send to the client. This is a simplified\\nversion of a static quest object that we can send to the client","lua_type":"{[string]: any}","realm":["Server"],"private":true,"source":{"line":307,"path":"RoQuest/Server/init.lua"}},{"name":"_StaticQuestLifeCycles","desc":"Caches all the static data from all the lifecycles","lua_type":"{[string]: QuestLifeCycle}","realm":["Server"],"private":true,"source":{"line":316,"path":"RoQuest/Server/init.lua"}},{"name":"_StaticAvailableQuests","desc":"A static reference to the quests that are available for the server\\nto give to the players","lua_type":"{[string]: true}","realm":["Server"],"private":true,"source":{"line":326,"path":"RoQuest/Server/init.lua"}},{"name":"_StaticObjectiveReference","desc":"A reference to check the objectives of our quests","lua_type":"{[string]: {[string]: true}}","realm":["Server"],"private":true,"source":{"line":335,"path":"RoQuest/Server/init.lua"}},{"name":"_Quests","desc":"Cached data of all of the quests that the players are currently engaged with.\\nThis includes quests that are: InProgress, Completed and Delivered","lua_type":"{[Player]: {[string]: Quest}}","realm":["Server"],"private":true,"source":{"line":345,"path":"RoQuest/Server/init.lua"}},{"name":"_PlayerQuestData","desc":"Cahed PlayerQuestData for all of the players. This is the dynamic data\\nof the player quests that he is currently holding","lua_type":"{[Player]: PlayerQuestData}","realm":["Server"],"private":true,"source":{"line":355,"path":"RoQuest/Server/init.lua"}},{"name":"_AvailableQuests","desc":"Cached pointer to all the quests that are available for this player to start","lua_type":"{[Player]: {[string]: true}}","realm":["Server"],"private":true,"source":{"line":364,"path":"RoQuest/Server/init.lua"}},{"name":"_UnavailableQuests","desc":"Cached pointer to all the quests that are unavailable for this player","lua_type":"{[Player]: {[string]: true}}","realm":["Server"],"private":true,"source":{"line":373,"path":"RoQuest/Server/init.lua"}},{"name":"_Troves","desc":"Caches troves of all the players that will get cleared up when the player leaves the game","lua_type":"{[Player]: Trove}","realm":["Server"],"private":true,"source":{"line":382,"path":"RoQuest/Server/init.lua"}},{"name":"_LifeCycles","desc":"Caches all the lifecycles of the quests that the players are currently engaged with","lua_type":"{[Player]: {[string]: {[string]: QuestLifeCycle}}}","realm":["Server"],"private":true,"source":{"line":391,"path":"RoQuest/Server/init.lua"}}],"types":[],"name":"RoQuestServer","desc":"This is the main MOdule for the RoQuest server-side. \\nThis is the module developers have to access \\nto and can use to interact with libraris\' API from the server-side\\n\\nHere the developer can feed quests, change their progress, give quests, \\nautomatically complete, deliver, cancel and much more!\\n\\nThe data isn\'t automatically saved, so you have to save it yourself, you can find a guide\\nto that in the Docs section!","realm":["Server"],"source":{"line":56,"path":"RoQuest/Server/init.lua"}}')}}]);